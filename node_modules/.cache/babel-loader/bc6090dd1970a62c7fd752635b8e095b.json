{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alice-Maria\\\\Downloads\\\\licenta-fe\\\\libs\\\\authentication\\\\src\\\\containers\\\\oauth2\\\\OauthRedirect.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { authSlice } from '../redux/slice';\nimport { loginUserWithGoogle } from '../redux/slice';\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const withRouter = Component => {\n  function ComponentWithRouterProp(props) {\n    let location = useLocation();\n    let params = useParams();\n    return /*#__PURE__*/_jsxDEV(Component, Object.assign({}, props, {\n      router: {\n        location,\n        params\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n\n  return ComponentWithRouterProp;\n};\n\nclass OAuth2RedirectHandler extends Component {\n  getUrlParameter(name) {\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    console.log(this.props);\n    var results = regex.exec(this.props.router.location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n  }\n\n  render() {\n    const token = this.getUrlParameter('token');\n\n    if (token) {\n      localStorage.setItem(\"token\", token);\n      this.props.setIsLoggedIn();\n      this.props.loginUserWithGoogle().then(console.log(JSON.stringify(user)));\n      console.log(\"The user role is\" + this.props.user.role);\n\n      if (this.props.user.role === 'ROLE_USER') {\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: {\n            pathname: \"/select-role\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 24\n        }, this);\n      } else {\n        if (this.props.user.role === 'ROLE_GUEST') {\n          return /*#__PURE__*/_jsxDEV(Navigate, {\n            to: {\n              pathname: \"/houses-guest\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 28\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Navigate, {\n            to: {\n              pathname: \"/bookings\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 28\n          }, this);\n        }\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: {\n          pathname: \"/login\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  console.log(ownProps);\n  const {\n    auth\n  } = state;\n  return Object.assign({}, ownProps, {\n    isLoggedIn: auth.isLoggedIn,\n    user: auth.user\n  });\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setIsLoggedIn: () => dispatch(authSlice.actions.setIsLoggedIn()),\n    loginUserWithGoogle: () => dispatch(loginUserWithGoogle()),\n    dispatch\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OAuth2RedirectHandler));","map":null,"metadata":{},"sourceType":"module"}