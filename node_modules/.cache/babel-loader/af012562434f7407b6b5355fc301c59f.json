{"ast":null,"code":"import \"core-js/modules/es.promise.js\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const loginUser = createAsyncThunk('auth/loginUser', async payload => {\n  try {\n    const response = await axios.post('http://localhost:8080/api/login', payload);\n    console.log(response.status);\n    return response.data;\n  } catch (err) {\n    console.log('am ajuns aici');\n    return Promise.reject({\n      message: 'login fail'\n    });\n  }\n});\nexport const loginUserWithGoogle = createAsyncThunk('auth/loginUserWithGoogle', async () => {\n  try {\n    const authToken = localStorage.getItem('token');\n    const response = await axios.post('http://localhost:8080/user/me', {\n      headers: {\n        Authorization: 'Bearer ' + authToken //the token is a variable which holds the token\n\n      }\n    });\n    console.log(\" the user is \" + response.status);\n    return response.data;\n  } catch (err) {\n    console.log('am ajuns aici');\n    return Promise.reject({\n      message: 'login fail'\n    });\n  }\n});\nexport const registerUser = createAsyncThunk('auth/registerUser', async payload => {\n  try {\n    const response = await axios.post('http://localhost:8080/api/register', payload);\n    return response.status;\n  } catch (err) {\n    console.log('am ajuns aici');\n    return Promise.reject({\n      message: 'register fail'\n    });\n  }\n});\nexport const saveReview = createAsyncThunk('auth/saveReview', async payload => {\n  try {\n    const response = await axios.post('http://localhost:8080/api/review', payload);\n    return response.status;\n  } catch (err) {\n    console.log('am ajuns aici');\n    return Promise.reject({\n      message: 'add review fail'\n    });\n  }\n});\nexport const savePlace = createAsyncThunk('auth/addPlace', async payload => {\n  try {\n    const response = await axios.post('http://localhost:8080/api/review', payload);\n    return response.status;\n  } catch (err) {\n    console.log('am ajuns aici');\n    return Promise.reject({\n      message: 'Save new place failed'\n    });\n  }\n});\nexport const getRestaurants = createAsyncThunk('auth/getRestaurants', async () => {\n  const response = await axios.get('http://localhost:8080/api/restaurant');\n  console.log(\"Get restaurants was called\");\n  return response.data;\n});\nexport const getReservations = createAsyncThunk('auth/getReservations', async () => {\n  const authToken = localStorage.getItem('token');\n  const response = await axios.get('http://127.0.0.1:5500/apps/mocks/reservations.json');\n  console.log(\"Get reservations was called\");\n  return response.data;\n});\nexport const getHouses = createAsyncThunk('auth/getHouses', async () => {\n  const response = await axios.get('http://127.0.0.1:5500/apps/mocks/houses.json');\n  console.log(\"Get houses was called\");\n  return response.data;\n});\nexport const getReviews = createAsyncThunk('auth/getReviews', async id => {\n  const response = await axios.get('http://localhost:8080/api/review/' + id);\n  console.log(\"Get reviews was called\" + id);\n  return response.data;\n});\nexport const getRestaurant = createAsyncThunk('auth/getRestaurant', async id => {\n  console.log(\"Get restaurant was called with params: \" + id);\n  const response = await axios.get('http://localhost:8080/api/restaurant/' + id);\n  console.log(response.data);\n  return response.data;\n});\nconst initialState = {\n  restaurants: [],\n  restaurant: {},\n  isLoggedIn: false,\n  user: {},\n  reviews: [],\n  review: {},\n  toastError: '',\n  toastSuccess: '',\n  image: '',\n  reservations: [],\n  houses: []\n}; // Then, handle actions in your reducers:\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout(state) {\n      console.log('logging out');\n      state.isLoggedIn = false;\n      sessionStorage.removeItem(\"token\");\n    },\n\n    setIsLoggedIn(state) {\n      state.isLoggedIn = true;\n    },\n\n    setToastSuccess(state, action) {\n      state.toastSuccess = action.payload;\n    },\n\n    setToastError(state, action) {\n      state.toastError = action.payload;\n    }\n\n  },\n  // standard reducer logic, with auto-generated action types per reducer\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getRestaurants.fulfilled, (state, response) => {\n      // Add restaurants to the slice array\n      state.restaurants = response.payload;\n      console.log(state.restaurants);\n    });\n    builder.addCase(loginUser.fulfilled, (state, response) => {\n      // Set is Logged in to true\n      console.log('login success');\n      state.isLoggedIn = true;\n      state.user = response.payload;\n      authSlice.caseReducers.setToastSuccess(state, {\n        payload: 'Login successful!',\n        type: 'toast'\n      });\n    });\n    builder.addCase(loginUser.rejected, state => {\n      // Set is Logged in to false\n      state.isLoggedIn = false;\n      console.log('login reject');\n      authSlice.caseReducers.setToastError(state, {\n        payload: 'Login failed! Wrong credentials',\n        type: 'toast'\n      });\n    });\n    builder.addCase(registerUser.fulfilled, state => {\n      // Set is Logged in to true\n      console.log('success baby');\n      authSlice.caseReducers.setToastSuccess(state, {\n        payload: 'Register successful!',\n        type: 'toast'\n      });\n    });\n    builder.addCase(registerUser.rejected, state => {\n      // Set is Logged in to true\n      console.log('success baby');\n      authSlice.caseReducers.setToastError(state, {\n        payload: 'Register failed!',\n        type: 'toast'\n      });\n    });\n    builder.addCase(getRestaurant.fulfilled, (state, response) => {\n      // Add restaurants to the slice array\n      state.restaurant = response.payload;\n      state.review = response.payload.review;\n      console.log(state.restaurant);\n    });\n    builder.addCase(getReviews.fulfilled, (state, response) => {\n      // Add restaurants to the slice array\n      state.reviews = response.payload;\n      console.log(state.reviews);\n    });\n    builder.addCase(getReservations.fulfilled, (state, response) => {\n      // Add reservations to the slice array\n      state.reservations = response.payload;\n      console.log(state.reservations);\n    });\n    builder.addCase(savePlace.fulfilled, (state, response) => {\n      // Set is Logged in to true\n      console.log('save place success');\n      authSlice.caseReducers.setToastSuccess(state, {\n        payload: 'Add place successful!',\n        type: 'toast'\n      });\n    });\n    builder.addCase(savePlace.rejected, state => {\n      // Set is Logged in to false\n      console.log('save place reject');\n      authSlice.caseReducers.setToastError(state, {\n        payload: 'Add place failed!',\n        type: 'toast'\n      });\n    });\n    builder.addCase(getHouses.fulfilled, (state, response) => {\n      // Set is Logged in to true\n      console.log('save place success');\n      state.houses = response.payload;\n    });\n    builder.addCase(loginUserWithGoogle.fulfilled, (state, response) => {\n      // Set is Logged in to true\n      console.log('login with google success');\n      state.user = response.payload;\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}